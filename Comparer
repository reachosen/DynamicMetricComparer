from types import SimpleNamespace

# Dynamic object to store metrics
class DynamicMetric(SimpleNamespace):
    def __getitem__(self, name):
        return self.__dict__.get(name)
    
    def __setitem__(self, name, value):
        self.__dict__[name] = value

# Mock method to get Oracle data
def get_oracle_data(domain, metric):
    oracle_data = DynamicMetric()
    oracle_data.domain = domain
    oracle_data.metric = metric
    oracle_data.values = {1: 30, 2: 40, 3: 35}  # Mock data
    return oracle_data

# Mock method to get SQL data
def get_sql_data(domain, metric):
    sql_data = DynamicMetric()
    sql_data.domain = domain
    sql_data.metric = metric
    #sql_data.values = {1: 30, 2: 40, 3: 35} 
    sql_data.values = {1: 30, 2: 41, 3: 36}  # Mock data
    return sql_data

# Compare function
def compare_data(oracle_data, sql_data):
    if oracle_data.domain != sql_data.domain or oracle_data.metric != sql_data.metric:
        return f"Cannot compare metrics from different domains or metrics: {oracle_data.domain}, {sql_data.domain} or {oracle_data.metric}, {sql_data.metric}"

    results = {}
    for key, oracle_value in oracle_data.values.items():
        sql_value = sql_data.values.get(key, None)
        if sql_value is not None:
            results[key] = 'Pass' if oracle_value == sql_value else 'Fail'  # changed the range here

    return results


if __name__ == "__main__":
    oracle_data = get_oracle_data('Utilization Review', 'ER_wait_times')
    sql_data = get_sql_data('Utilization Review', 'ER_wait_times')
    print(oracle_data)
    print(sql_data)
    comparison_results = compare_data(oracle_data, sql_data)
    print(f"Comparing {oracle_data.domain} - {oracle_data.metric}")
    for key, result in comparison_results.items():
        print(f"Hospital_ID: {key}, Test Result: {result}")
